ctpct <- paste(p1, " (", round(pct, 3)*100, "%)", sep = "")
ctpct
names(ctpct) <- names(data[, var2])
result <- rbind(result, ctpct)
result
p1 <- as.vector(data[data[, var1]==trait[i], var2])
pct <- p1/sum(p1)
ctpct <- paste(p1, " (", round(pct, 3)*100, "%)", sep = "")
ctpct <- data.frame(ctpct)
ctpct
names(ctpct) <- names(data[, var2])
result <- rbind(result, ctpct)
data <- data[order(data[, var1]), ] # sort by the group variable
trait <- unique(data[, var1] )
ntrait <- length(trait)
result <- data.frame(matrix(NA, nrow = 0, ncol=length(var2)))
names(result) <- names(data[, var2])
result
result <- rbind(result, ctpct)
result
names(ctpct) <- names(data[, var2])
ctpct
data
names(data)
names(data[, var2])
var2
names(ctpct) <- names(data)[var2]
ctpct
count_percent <- function(data, var1, var2){
data <- data[order(data[, var1]), ] # sort by the group variable
trait <- unique(data[, var1] )
ntrait <- length(trait)
result <- data.frame(matrix(NA, nrow = 0, ncol=length(var2)))
names(result) <- names(data[, var2])
for ( i in 1:ntrait){
if (length(var2) > 1){
p1 <- as.matrix(data[data[, var1]==trait[i], var2])
pct <- sweep(p1, 2, colSums(p1), "/")   # convert to percentage
ctpct <- paste(p1, " (", round(pct, 3)*100, "%)", sep = "")
ctpct <- data.frame(matrix(ctpct, nrow=nrow(p1), ncol= ncol(p1), byrow = F))
}
else {
p1 <- as.vector(data[data[, var1]==trait[i], var2])
pct <- p1/sum(p1)
ctpct <- paste(p1, " (", round(pct, 3)*100, "%)", sep = "")
ctpct <- data.frame(ctpct)
}
names(ctpct) <- names(data)[var2]
result <- rbind(result, ctpct)
}
result1 <- dplyr::bind_cols(data[, -var2], result)
return(result1)
}
count_percent(cat_sum, 1, 3)
source('~/cdashQC/cdashQC-master/R/cdash_dem.R')
library(devtools)
library(roxygen2)
library(dplyr)
# create("cdashQC")
setwd("C:/Users/zhuob01/Documents/cdashQC/cdashQC-master")
#
# devtools::use_data(CODES, internal = T)
document()
check()
build(manual = T)
install.packages("~/cdashQC/cdashQC_0.1.1.tar.gz", repos = NULL, type = "source")
library(tidyr)      # tidy data
library(lazyeval)
library(dplyr)  # data manipulation tools
library(reshape2) # data manipulation tools
SEQ = rep(c("A", "B", "C"), 3); subtype = sample(c("ONE", "TWO", "THREE"), 9, replace = TRUE)
data <- data.frame(SEQ, subtype, BMI = rnorm(9, 25, 4), HEIGHT = rnorm(9, 175,3))
get_summary_stats(data, group = "SEQ", var = "subtype")
get_summary_stats(data, group = "SEQ", var = "BMI")
library(cdashQC)
SEQ = rep(c("A", "B", "C"), 3); subtype = sample(c("ONE", "TWO", "THREE"), 9, replace = TRUE)
data <- data.frame(SEQ, subtype, BMI = rnorm(9, 25, 4), HEIGHT = rnorm(9, 175,3))
get_summary_stats(data, group = "SEQ", var = "subtype")
get_summary_stats(data, group = "SEQ", var = "BMI")
library(dplyr)  # data manipulation tools
trait = rep(c("A", "B", "C"), 3); subtype = paste(trait, rep(1:3, each=3), sep = "")
data <- data.frame(trait, subtype, count1 = rpois(9, 5), count2 = rpois(9, 10))
count_percent(data, var1= 1, var2 = 3:4)
library(QCdata)
included <- new_create_included(ex, dm, cr, ds)
dem_summary(dm, ex, vs, included, group = "SEQ")   # the summary by group
dem_summary(dm, ex, vs, included, group = "SPONSOR")  # to get the overall summary
source('~/cdashQC/setup.R')
library(QCdata)
included <- new_create_included(ex, dm, cr, ds)
dem_summary(dm, ex, vs, included, group = "SEQ")   # the summary by group
dem_summary(dm, ex, vs, included, group = "SPONSOR")  # to get the overall summary
source("https://github.com/statswork/cdashQC/blob/master/setup.R")
source("https://github.com/statswork/cdashQC/blob/master/setup.R")
trait = rep(c("A", "B", "C"), 3); subtype = paste(trait, rep(1:3, each=3), sep = "")
data <- data.frame(trait, subtype, count1 = rpois(9, 5), count2 = rpois(9, 10))
data
count_percent(data[, -2], var1= 1, var2 = 3:4)
count_percent(data[, -2], var1= 1, var2 = 2:3)
data[, -2]
ds <- data[, -2]
count_percent(ds, var1= 1, var2 = 2:3)
var1 <- 1
var2 <- 2:3
data <- ds
data <- data[order(data[, var1]), ] # sort by the group variable
trait <- unique(data[, var1] )
ntrait <- length(trait)
result <- data.frame(matrix(NA, nrow = 0, ncol=length(var2)))
names(result) <- names(data[, var2])
result
for ( i in 1:ntrait){
if (length(var2) > 1){
p1 <- as.matrix(data[data[, var1]==trait[i], var2])
pct <- sweep(p1, 2, colSums(p1), "/")   # convert to percentage
ctpct <- paste(p1, " (", round(pct, digit_keep)*100, "%)", sep = "")
ctpct <- data.frame(matrix(ctpct, nrow=nrow(p1), ncol= ncol(p1), byrow = F))
}
else {
p1 <- as.vector(data[data[, var1]==trait[i], var2])
pct <- p1/sum(p1)
ctpct <- paste(p1, " (", round(pct, digit_keep)*100, "%)", sep = "")
ctpct <- data.frame(ctpct)
}
names(ctpct) <- names(data)[var2]
result <- rbind(result, ctpct)
}
digit_keep = 3)
for ( i in 1:ntrait){
if (length(var2) > 1){
p1 <- as.matrix(data[data[, var1]==trait[i], var2])
pct <- sweep(p1, 2, colSums(p1), "/")   # convert to percentage
ctpct <- paste(p1, " (", round(pct, digit_keep)*100, "%)", sep = "")
ctpct <- data.frame(matrix(ctpct, nrow=nrow(p1), ncol= ncol(p1), byrow = F))
}
else {
p1 <- as.vector(data[data[, var1]==trait[i], var2])
pct <- p1/sum(p1)
ctpct <- paste(p1, " (", round(pct, digit_keep)*100, "%)", sep = "")
ctpct <- data.frame(ctpct)
}
names(ctpct) <- names(data)[var2]
result <- rbind(result, ctpct)
}
digit_keep = 3
for ( i in 1:ntrait){
if (length(var2) > 1){
p1 <- as.matrix(data[data[, var1]==trait[i], var2])
pct <- sweep(p1, 2, colSums(p1), "/")   # convert to percentage
ctpct <- paste(p1, " (", round(pct, digit_keep)*100, "%)", sep = "")
ctpct <- data.frame(matrix(ctpct, nrow=nrow(p1), ncol= ncol(p1), byrow = F))
}
else {
p1 <- as.vector(data[data[, var1]==trait[i], var2])
pct <- p1/sum(p1)
ctpct <- paste(p1, " (", round(pct, digit_keep)*100, "%)", sep = "")
ctpct <- data.frame(ctpct)
}
names(ctpct) <- names(data)[var2]
result <- rbind(result, ctpct)
}
result1 <- dplyr::bind_cols(data[, -var2], result)
data[, -var2]
r1 <- as.data.frame(data[, -var2])
r1
names(r1) <- names(data[, -var2])
r1
data[, -var2]
var()
var2
names(data)
names(r1) <- names(data)[-var2]
r1
source('~/cdashQC/cdashQC-master/R/useful.R')
count_percent(ds, var1= 1, var2 = 2:3)
source('~/cdashQC/cdashQC-master/R/useful.R')
names(dm)
r1 <- get_summary_stats(dm, group = "EX_TRT_C", var = "SEX")
r1 <- get_summary_stats(dm, group = "PERIOD", var = "SEX")
r1
names(ex)
get_summary_stats(dm, group = "SEX", var = "CLIENTID")
get_summary_stats(ex, group = "SEX", var = "EX_TRT_C")
get_summary_stats(ex, group = "EX_TRT_C", var = "PERIOD")
get_summary_stats(ex, group = "PERIOD", var = "PHOUR")
get_summary_stats(eg, group = "PERIOD", var = "EG_TEST")
count_percent(r1, 1, 3:5)
count_percent(r1, var1 = 2, var2 = 3:5)
data <- data.frame(trait, subtype, count1 = rpois(9, 5), count2 = rpois(9, 10))
data
get_summary_stats(eg, group = "EG_TEST", var = "PERIOD")
count_percent(r1, var1 = 2, var2 = 3:5)
r1 <- get_summary_stats(eg, group = "EG_TEST", var = "PERIOD")
r1 <- get_summary_stats(eg, group = "EG_TEST", var = "PERIOD")
r1
r1 <- get_summary_stats(eg, group = "PERIOD", var = "EG_TEST")
r1
var1 = 2
var2 = 3:5
data <- r1
data <- data[order(data[, var1]), ] # sort by the group variable
trait <- unique(data[, var1] )
ntrait <- length(trait)
result <- data.frame(matrix(NA, nrow = 0, ncol=length(var2)))
names(result) <- names(data)[var2]
trait
ntrait
var1 <- 1
data <- data[order(data[, var1]), ] # sort by the group variable
trait <- unique(data[, var1] )
ntrait <- length(trait)
result <- data.frame(matrix(NA, nrow = 0, ncol=length(var2)))
names(result) <- names(data)[var2]
ntrait
length(var2) > 1
p1 <- as.matrix(data[data[, var1]==trait[i], var2])
pct <- sweep(p1, 2, colSums(p1), "/")   # convert to percentage
ctpct <- paste(p1, " (", round(pct, digit_keep)*100, "%)", sep = "")
ctpct <- data.frame(matrix(ctpct, nrow=nrow(p1), ncol= ncol(p1), byrow = F))
ctpct
p1
i <- 1
data[data[, var1]==trait[i], var2]
as.matrix(data[data[, var1]==trait[i], var2])
p1 <- as.matrix(data[data[, var1]==trait[i], var2])
p1
pct <- sweep(p1, 2, colSums(p1), "/")   # convert to percentage
pct
ctpct <- paste(p1, " (", round(pct, digit_keep)*100, "%)", sep = "")
ctpct
ctpct <- data.frame(matrix(ctpct, nrow=nrow(p1), ncol= ncol(p1), byrow = F))
ctpct
names(ctpct) <- names(data)[var2]
ctpct
result
result <- rbind(result, ctpct)
result
as.data.frame(data[, -var2])
r1 <- as.data.frame(data[, -var2])
names(r1) <- names(data)[-var2]
dplyr::bind_cols(r1, result)
count_percent <- function(data, var1, var2, digit_keep = 3){
data <- data[order(data[, var1]), ] # sort by the group variable
trait <- unique(data[, var1] )
ntrait <- length(trait)
result <- data.frame(matrix(NA, nrow = 0, ncol=length(var2)))
names(result) <- names(data)[var2]
for ( i in 1:ntrait){
if (length(var2) > 1){
p1 <- as.matrix(data[data[, var1]==trait[i], var2])
pct <- sweep(p1, 2, colSums(p1), "/")   # convert to percentage
ctpct <- paste(p1, " (", round(pct, digit_keep)*100, "%)", sep = "")
ctpct <- data.frame(matrix(ctpct, nrow=nrow(p1), ncol= ncol(p1), byrow = F))
}
else {
p1 <- as.vector(data[data[, var1]==trait[i], var2])
pct <- p1/sum(p1)
ctpct <- paste(p1, " (", round(pct, digit_keep)*100, "%)", sep = "")
ctpct <- data.frame(ctpct)
}
names(ctpct) <- names(data)[var2]
result <- rbind(result, ctpct)
}
r1 <- as.data.frame(data[, -var2])
names(r1) <- names(data)[-var2]
result1 <- dplyr::bind_cols(r1, result)
return(result1)
}
count_percent(r1, var1 = 2, var1 = 3:5)
count_percent(r1, var1 = 2, var2 = 3:5)
r1 <- get_summary_stats(eg, group = "PERIOD", var = "EG_TEST")
debug(count_percent)
count_percent(r1, var1 = 2, var2 = 3:5)
result
ntrait
quit()
undebug(count_percent)
count_percent(r1, var1 = 1, var2 = 3:5)
library(devtools)
library(roxygen2)
library(dplyr)
# create("cdashQC")
setwd("C:/Users/zhuob01/Documents/cdashQC/cdashQC-master")
#
# devtools::use_data(CODES, internal = T)
document()
check()
build(manual = T)
install.packages("~/cdashQC/cdashQC_0.1.1.tar.gz", repos = NULL, type = "source")
source('~/cdashQC/setup.R')
library(dplyr)  # data manipulation tools
trait = rep(c("A", "B", "C"), 3); subtype = paste(trait, rep(1:3, each=3), sep = "")
data <- data.frame(trait, subtype, count1 = rpois(9, 5), count2 = rpois(9, 10))
count_percent(data, var1= 1, var2 = 3:4)
r1 <- get_summary_stats(eg, group = "PERIOD", var = "EG_TEST")
count_percent(r1, var1 = 1, var2 = 3:5)
included <- new_create_included(ex, dm, cr, ds)
dem_summary(dm, ex, vs, included, group = "SEQ")   # the summary by group
dem_summary(dm, ex, vs, included, group = "SPONSOR")  # to get the overall summary
SEQ = rep(c("A", "B", "C"), 3); subtype = sample(c("ONE", "TWO", "THREE"), 9, replace = TRUE)
data <- data.frame(SEQ, subtype, BMI = rnorm(9, 25, 4), HEIGHT = rnorm(9, 175,3))
get_summary_stats(data, group = "SEQ", var = "subtype")
get_summary_stats(data, group = "SEQ", var = "BMI")
library(devtools)
library(roxygen2)
library(dplyr)
# create("cdashQC")
setwd("C:/Users/zhuob01/Documents/cdashQC/cdashQC-master")
#
# devtools::use_data(CODES, internal = T)
document()
check()
build(manual = T)
install.packages("~/cdashQC/cdashQC_0.1.1.tar.gz", repos = NULL, type = "source")
source('~/cdashQC/setup.R')
eg2 <- replicate_eg(eg, reps = 3) # step 1: find the triplicates
eg_prob <- eg2$data_dirty         # need manual check
# the following rows should be removed
rows_removed <- c(2, 4, 7, 13, 14, 15, 19, 25, 28, 32, 37, 40, 44, 52, 57, 59, 64, 65)
eg3 <- replicate_clean(eg2, rows_removed)
ave <- replicate_avarage(eg3)
eg2 <- replicate_eg(eg, reps = 3) # step 1: find the triplicates
eg_prob <- eg2$data_dirty         # need manual check
# the following rows should be removed
rows_removed <- c(2, 4, 7, 13, 14, 15, 19, 25, 28, 32, 37, 40, 44, 52, 57, 59, 64, 65)
eg3 <- replicate_clean(eg2, rows_removed)
ave <- replicate_average(eg3)
head(ave)
source('~/cdashQC/cdashQC-master/R/cdash_eg.R')
eg2 <- replicate_eg(eg, reps = 3) # step 1: find the triplicates
eg_prob <- eg2$data_dirty         # need manual check
# the following rows should be removed
rows_removed <- c(2, 4, 7, 13, 14, 15, 19, 25, 28, 32, 37, 40, 44, 52, 57, 59, 64, 65)
eg3 <- replicate_clean(eg2, rows_removed)
ave <- replicate_average(eg3)
ave <- replicate_average(eg3, prefix="Ave")
head(ave)
unique(ave$PHOUR)
eg_change <- change_from_base(eg3)
View(eg_change)
str(ave)
View(ave)
View(eg_change)
View(eg3)
source('~/cdashQC/cdashQC-master/R/cdash_eg.R')
library(devtools)
library(roxygen2)
library(dplyr)
# create("cdashQC")
setwd("C:/Users/zhuob01/Documents/cdashQC/cdashQC-master")
#
# devtools::use_data(CODES, internal = T)
document()
check()
build(manual = T)
install.packages("~/cdashQC/cdashQC_0.1.1.tar.gz", repos = NULL, type = "source")
source('~/cdashQC/setup.R')
eg2 <- replicate_eg(eg, reps = 3) # find the triplicates
eg_prob <- eg2$data_dirty         # need manual check
# the following rows should be removed
rows_removed <- c(2, 4, 7, 13, 14, 15, 19, 25, 28, 32, 37, 40, 44, 52, 57, 59, 64, 65)
eg3 <- replicate_clean(eg2, rows_removed)
eg_change <- change_from_base(eg3, var = c("HR", "PR", "QRS", "QT", "QTCF"))
View(eg_change)
library(devtools)
library(roxygen2)
library(dplyr)
# create("cdashQC")
setwd("C:/Users/zhuob01/Documents/cdashQC/cdashQC-master")
#
# devtools::use_data(CODES, internal = T)
document()
check()
build(manual = T)
install.packages("~/cdashQC/cdashQC_0.1.1.tar.gz", repos = NULL, type = "source")
source('~/cdashQC/setup.R')
SEQ = rep(c("A", "B", "C"), 3); subtype = sample(c("ONE", "TWO", "THREE"), 9, replace = TRUE)
data <- data.frame(SEQ, subtype, BMI = rnorm(9, 25, 4), HEIGHT = rnorm(9, 175,3))
get_summary_stats(data, group = "SEQ", var = "subtype")
get_summary_stats(data, group = "SEQ", var = "BMI")
included <- new_create_included(ex, dm, cr, ds)
summary_dem(dm, ex, vs, included, group = "SEQ")   # the summary by group
summary_dem(dm, ex, vs, included, group = "SPONSOR")  # to get the overall summary
dmt <- create_dem(dm, ex, vs, included)
source('~/cdashQC/cdashQC-master/R/cdash_dem.R')
vsdm_1 <-find_race_age(dm, ex) %>% arrange(CLIENTID)
vsdm_2 <- weight_height_bmi(vs) %>% arrange(CLIENTID)
weight_height_bmi <- function(vs){
vs$VS_TEST[trimws(toupper(vs$VS_TEST)) == "BODY MASS INDEX"] <- "BMI"
# select the variables of interest
row_vs <- which(toupper(vs$PERIOD) == "SCREEN" &
toupper(vs$VS_TEST) %in%
c('BMI','WEIGHT','HEIGHT','ELBOW','FRAME'))
#
col_vs <- names(vs) %in%  c("CLIENTID", "VS_REU_R","VS_RES_R", "VS_TEST", "VS_DAT")
vs1 <- vs[row_vs, col_vs] %>% arrange(VS_RES_R)
vs1$VS_RES_R <- as.numeric(vs1$VS_RES_R)
vs2 <- dcast(vs1, CLIENTID + VS_DAT ~ VS_TEST, value.var = "VS_RES_R")
return(vs2)
}
vsdm_1 <-find_race_age(dm, ex) %>% arrange(CLIENTID)
vsdm_2 <- weight_height_bmi(vs) %>% arrange(CLIENTID)
vsdm <- inner_join(vsdm_1, vsdm_2 , by = "CLIENTID")  # combine race, ethnicity with BMI HEIGHT, WEIGHT
vsdm <- inner_join(vsdm %>% arrange(CLIENTID),    # get the SEQ info
included %>% select(CLIENTID, SEQ), by = "CLIENTID")
source('~/cdashQC/cdashQC-master/R/cdash_dem.R')
dmt <- create_dem(dm, ex, vs, included)
summary_dem(dmt, group = "SEQ")   # the summary by group
summary_dem(dmt, group = "SPONSOR")  # to get the overall summary
library(devtools)
library(roxygen2)
library(dplyr)
# create("cdashQC")
setwd("C:/Users/zhuob01/Documents/cdashQC/cdashQC-master")
#
# devtools::use_data(CODES, internal = T)
document()
check()
build(manual = T)
install.packages("~/cdashQC/cdashQC_0.1.1.tar.gz", repos = NULL, type = "source")
source('~/cdashQC/setup.R')
included <- new_create_included(ex, dm, cr, ds)
dmt <- create_dem(dm, ex, vs, included)
summary_dem(dmt, group = "SEQ")   # the summary by group
summary_dem(dmt, group = "SPONSOR")  # to get the overall summary
eg2 <- replicate_eg(eg, reps = 3) # step 1: find the triplicates
eg_prob <- eg2$data_dirty         # need manual check
# the following rows should be removed
rows_removed <- c(2, 4, 7, 13, 14, 15, 19, 25, 28, 32, 37, 40, 44, 52, 57, 59, 64, 65)
eg3 <- replicate_clean(eg2, rows_removed)
eg2 <- replicate_eg(eg, reps = 3) # find the triplicates
eg_prob <- eg2$data_dirty         # need manual check
# the following rows should be removed
rows_removed <- c(2, 4, 7, 13, 14, 15, 19, 25, 28, 32, 37, 40, 44, 52, 57, 59, 64, 65)
eg3 <- replicate_clean(eg2, rows_removed)
ave <- replicate_average(eg3, prefix = "Ave")
SEQ = rep(c("A", "B", "C"), 3); subtype = sample(c("ONE", "TWO", "THREE"), 9, replace = TRUE)
data <- data.frame(SEQ, subtype, BMI = rnorm(9, 25, 4), HEIGHT = rnorm(9, 175,3))
get_summary_stats(data, group = "SEQ", var = "subtype")
get_summary_stats(data, group = "SEQ", var = "BMI")
a <- create_threshold(flagvar = "PR", lower = 150, upper = 200, include_lower = FALSE, include_upper = TRUE,  flg_label = "^")
b <- create_threshold(flagvar = "QTCF",  upper = 430, flg_label = "*", add2existing = TRUE, thresh = a)
data <- data.frame(PR = rnorm(10, 175, 25), QTCF = rnorm(10, 440, 20))
flg_var(data, thresh=b, oor=c(TRUE, FALSE))
trait = rep(c("A", "B", "C"), 3); subtype = paste(trait, rep(1:3, each=3), sep = "")
data <- data.frame(trait, subtype, count1 = rpois(9, 5), count2 = rpois(9, 10))
count_percent(data, var1= 1, var2 = 3:4)
r1 <- get_summary_stats(eg, group = "PERIOD", var = "EG_TEST")
count_percent(r1, var1 = 1, var2 = 3:5)
data1 <- data.frame(x = rep(c("A", NA, "C"), each = 3), y = NA, z = c(1:3, NA, 5:9) )
data1
d1 <- keep_non_empty(data1)
d1
keep_non_empty(data1, return_truncated_data = F)
keep_non_empty(data1, return_truncated_data = T)
source('~/cdashQC/cdashQC-master/R/cdash_lab_oor.R')
library(devtools)
library(roxygen2)
library(dplyr)
# create("cdashQC")
setwd("C:/Users/zhuob01/Documents/cdashQC/cdashQC-master")
#
# devtools::use_data(CODES, internal = T)
document()
check()
build(manual = T)
install.packages("~/cdashQC/cdashQC_0.1.1.tar.gz", repos = NULL, type = "source")
library(devtools)
library(roxygen2)
library(dplyr)
# create("cdashQC")
setwd("C:/Users/zhuob01/Documents/cdashQC/cdashQC-master")
#
# devtools::use_data(CODES, internal = T)
document()
check()
build(manual = T)
install.packages("~/cdashQC/cdashQC_0.1.1.tar.gz", repos = NULL, type = "source")
source('~/cdashQC/setup.R')
eg2 <- replicate_eg(eg, reps = 3) # find the triplicates
eg_prob <- eg2$data_dirty         # need manual check
# the following rows should be removed
rows_removed <- c(2, 4, 7, 13, 14, 15, 19, 25, 28, 32, 37, 40, 44, 52, 57, 59, 64, 65)
eg3 <- replicate_clean(eg2, rows_removed)
eg_change <- change_from_base(eg3, var = c("HR", "PR", "QRS", "QT", "QTCF"))
others <- labshift(lb_cq, included, ex,  UA=FALSE)  #not urinalysis
UA <- labshift(lb_cq, included, ex, UA=TRUE)       # UA
included <- new_create_included(ex, dm, cr, ds)
others <- labshift(lb_cq, included, ex,  UA=FALSE)  #not urinalysis
UA <- labshift(lb_cq, included, ex, UA=TRUE)       # UA
lab_oor(lb_cq, ex, var_per_block = 6, digit_keep =3)
data1 <- data.frame(x = rep(c("A", NA, "C"), each = 3), y = NA, z = c(1:3, NA, 5:9) )
keep_non_empty(data1, return_truncated_data = T)
d1 <- keep_non_empty(data1)
d1
library(devtools)
library(roxygen2)
library(dplyr)
# create("cdashQC")
setwd("C:/Users/zhuob01/Documents/cdashQC/cdashQC-master")
#
# devtools::use_data(CODES, internal = T)
document()
check()
build(manual = T)
install.packages("~/cdashQC/cdashQC_0.1.1.tar.gz", repos = NULL, type = "source")
source('~/cdashQC/setup.R')
included <- new_create_included(ex, dm, cr, ds)
others <- labshift(lb_cq, included, ex,  UA=FALSE)  #not urinalysis
UA <- labshift(lb_cq, included, ex, UA=TRUE)       # UA
View(others)
View(UA)
