{
    "collab_server" : "",
    "contents" : "\n# #' create necessary variable for the demographic summary tables and listing.\n# #' \n# #' @title race and ethnicity indicator, age.\n# #' @param dm  the dataset dm read from sas\n# #' @param ex  the dataset ex read from sas\n# #' @return a data frame with additional columns listed as follows\n# #' \\item{race}{the race of the subject}\n# #' \\item{ethnic}{has two levels, \"NOT HISPANIC OR LATINO\" and \"HISPANIC OR LATINO\".}\n# #' \\item{EX_TRT_C}{the treatment groups}\n# #' \\item{ptno}{convert CLIENTID to numerical values of subject number}\n# #' \\item{age}{Age calculated from start date of treatment}\n\n\nfind_race_age <- function(dm, ex){\n  sort_col <- sort(names(dm))\n  dm1 <- data.frame(dm[, sort_col])\n\n  # combine the race categories, if some one has multiple race attribute\n  race_category <- sort(c(\"WHTE\", \"BLCK\", \"AMERIND\", \"HAWAIIAN\", \"ASIAN\", \"OTHER\"))\n  race_name <- sort(c('White','Black or African American','American Indian/Alaska Native',\n                 'Native Hawaiian/Pacific Islander','Asian','Other Race'))\n  col_id <- which(names(dm1) %in% race_category)\n  race_matrix <- dm1[, col_id]==\"YES\"\n  race_sum <- apply(race_matrix, 1, sum)\n  race <- c()\n  for ( i in 1:nrow(race_matrix)){\n      if (race_sum[i] == 1) {  # if this subject belongs to a single race\n        race[i] <-  race_name[which(race_matrix[i, ])] }\n      else if (race_sum[i] > 1) { # if the subject belongs to multi-race\n        race[i] <- paste(race_name[which(race_matrix[i, ])], sep= \",\", collapse = \", \")\n      }\n      else race[i] <- \"\"\n    }\n  dm1$race <- race\n\n  dm1$ptno <- as.numeric(dm1$CLIENTID)\n\n  # # create ethnicity variable if not already exist\n  if (!( \"ETHNIC\" %in% (names(dm1) ))) {  # not exist\n      id1 <- dm1$HISPANIC == \"\" # obs have empty value of HISPANIC\n      dm1$ethnic[!id1] <- ifelse(trimws(dm1$HISPANIC[!id1]) %in%\n                                c(\"NOT HISPANIC OR LATINO\", \"NO\"),\n                    \"NOT HISPANIC OR LATINO\", \"HISPANIC OR LATINO\")\n      dm1$ethnic[id1] <- \"\"\n  }\n\n  # get the treatment information\n  ex1 <- ex %>% select(CLIENTID, EX_TRT_C, EX_STDAT) %>% \n            arrange(CLIENTID, EX_TRT_C, EX_STDAT) %>% \n            group_by(CLIENTID, EX_TRT_C) %>%\n            filter(row_number()==1)\n  \n  dm1 <- left_join(dm1, ex1, by = \"CLIENTID\")\n\n  # calculate age by EX_STDAT (start date of treatement)\n  span <- time_length(interval(ymd(dm1$BRTHDAT), ymd(dm1$EX_STDAT)), \"year\")\n  dm1$age <- floor(span)\n\n\n  return(dm1)\n}\n\n\n\n# #' extract BMI, weight and height from vs.sas7bat.\n# #'\n# #' @title read BMI Weight and Height info from Screening stage.\n# #' @param  vs  the vs sas data\n# #' @return a data frame containing BMI, WEIGHT and HEIGHT from admission stage\n# #' @export\n\nweight_height_bmi <- function(vs){\n\n  vs$VS_TEST[trimws(toupper(vs$VS_TEST)) == \"BODY MASS INDEX\"] <- \"BMI\"\n  \n  # select the variables of interest\n  row_vs <- which(toupper(vs$PERIOD) == \"SCREEN\" &\n                    toupper(vs$VS_TEST) %in%\n                    c('BMI','WEIGHT','HEIGHT','ELBOW','FRAME'))\n\n\n  #\n  col_vs <- names(vs) %in%  c(\"CLIENTID\", \"VS_REU_R\",\"VS_RES_R\", \"VS_TEST\", \"VS_DAT\")\n\n  vs1 <- vs[row_vs, col_vs] %>% arrange(VS_RES_R)\n  vs1$VS_RES_R <- as.numeric(vs1$VS_RES_R)\n\n  vs2 <- dcast(vs1, CLIENTID + VS_DAT ~ VS_TEST, value.var = \"VS_RES_R\")\n\n  return(vs2)\n}\n\n\n#' @title create the demographics data.\n#' @param dm the dm data set\n#' @param ex the ex data set\n#' @param vs the vs data set\n#' @param inlcuded the included data set created by \\code{new_create_included}\n#' @return a data frame\n#' @export\n#' @seealso \\code{\\link{new_create_included}}\n\ncreate_dem <- function(dm, ex, vs, included){\n  \n  vsdm_1 <-find_race_age(dm, ex) %>% arrange(CLIENTID)\n  vsdm_2 <- weight_height_bmi(vs) %>% arrange(CLIENTID)\n  \n  vsdm <- inner_join(vsdm_1, vsdm_2 , by = \"CLIENTID\")  # combine race, ethnicity with BMI HEIGHT, WEIGHT\n  vsdm <- inner_join(vsdm %>% arrange(CLIENTID),    # get the SEQ info\n                     included %>% select(CLIENTID, SEQ), by = \"CLIENTID\")\n  return(vsdm)\n  \n}\n\n\n#' Summarize the demographic data\n#'\n#' @title demographic summary.\n#' @param dmt the data set created by \\code{create_dem}.\n#' @param group which variable name would be used to calculate summary statistics? \n#' @param na.rm  should missing values be included?  \\code{TRUE} by default.\n#' @return a data frame\n#' @export\n#' @examples \n#' included <- new_create_included(ex, dm, cr, ds)\n#' dmt <- create_dem(dm, ex, vs, included)\n#' summary_dem(dmt, group = \"SEQ\")   # the summary by group\n#' summary_dem(dmt, group = \"SPONSOR\")  # to get the overall summary\n#' @seealso \\code{\\link{new_create_included}} and \\code{\\link{create_dem}}\n\n\nsummary_dem <- function(dmt, group = \"EX_TRT_C\", na.rm = TRUE){\n\n   vsdm <- dmt\n    # for categorical\n    race_sum <- get_summary_stats(vsdm, group = group, var = \"race\", na.rm = na.rm)\n    sex_sum <- get_summary_stats(vsdm, group = group, var = \"SEX\", na.rm = na.rm)\n    ethnic_sum <- get_summary_stats(vsdm, group = group, var = \"ethnic\", na.rm = na.rm)\n    cat_sum <- dplyr::bind_rows(race_sum, sex_sum, ethnic_sum)\n    \n  \n    # turn the counts to percentages\n    cat_result <- count_percent(cat_sum, var1 = 1, var2 = 3:ncol(cat_sum), digit_keep =3)\n\n    # for continuous\n    bmi <- get_summary_stats(vsdm, group = group, var = \"BMI\", na.rm = na.rm)\n    height <- get_summary_stats(vsdm, group = group, var = \"HEIGHT\", na.rm = na.rm)\n    weight <- get_summary_stats(vsdm, group = group, var = \"WEIGHT\", na.rm = na.rm)\n    age <- get_summary_stats(vsdm, group = group, var = \"age\", na.rm = na.rm)\n    continous_sum <- dplyr::bind_rows(bmi, height, weight, age)\n\n    # customize the output\n    \n     result <- list(categorical = cat_result, continous = continous_sum)\n\n   return(result)\n}\n\n\n\n##\n#' Summarize the demographic data\n#'\n#' @title demographics listing.\n#' @param dmt the data set created by \\code{create_dem}.\n#' @return a data frame\n#' @export\n#' @seealso \\code{\\link{new_create_included}} and \\code{\\link{create_dem}}\n#' \n#' \nlisting_dem <- function(dmt){\n\n result <- dmt %>% \n   select(CLIENTID, BRTHDAT, age, SEX_D, race, ethnic, HEIGHT, WEIGHT, BMI) %>%\n   arrange(CLIENTID)\n\n  return(result)\n}\n\n\n\n\n",
    "created" : 1476393801615.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3438448017",
    "id" : "3128F03C",
    "lastKnownWriteTime" : 1476394725,
    "last_content_update" : 1476394725504,
    "path" : "~/cdashQC/cdashQC-master/R/cdash_dem.R",
    "project_path" : "cdashQC-master/R/cdash_dem.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}