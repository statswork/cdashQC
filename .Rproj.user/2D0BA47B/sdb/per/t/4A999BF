{
    "collab_server" : "",
    "contents" : "################################################################################################\n#                                  Lab Shift\n#\n################################################################################################\n\n# Steps\n# 1. clean lb_cq\n# 2. create predose baseline\n# 3. create postdose,\n# 4. merge them into one data set for creating lab shift table.\n# 5. make tables\n\n\n## Step 1:  first build the data and clean it ----------------------------------------------\n\n#' Clean the lb_cq data\n#' @title prepare data for lab shift table.\n#' @param lb_cq  the dataset lb_cq read from sas\n#' @param ex  the dataset ex read from sas\n#' @param included  the dataset created by \\code{new_create_included()}. This is the same as the data \"included\" from sas\n#' @return a data frame\n#' @export\n#' @seealso \\code{\\link{new_create_included}}\n#'\n\n\ncreate_lb_cq <- function(lb_cq, included, ex){\n  \n  lb_cq <- create_phour(lb_cq)\n\n  laborig <- lb_cq %>% filter(trimws(toupper(LB_UNSCH)) != \"SPECIAL\" |\n                                trimws(toupper(LB_CMTST)) != \"CLOTTED UNABLE TO ANALYZE\") %>%\n                        filter(!grepl(\"EARLY TERMINATION\", toupper(PERIOD)))  # filter PERIOD by pattern\n\n\n  id1 <- trimws(toupper(laborig$LB_TESTC)) == \"CK-MB\"\n  id2 <- trimws(toupper(laborig$LB_TESTC)) == \"A/G\"\n  id3 <- trimws(toupper(laborig$LB_TESTC)) == \"B/C\"\n  laborig <- laborig %>% mutate(LB_TESTC = replace(LB_TESTC, id1, \"CKMBB\"),\n                                LB_TESTC = replace(LB_TESTC, id2, \"AG\"),\n                                LB_TESTC = replace(LB_TESTC, id3, \"BC\"),\n                                LB_ORREU = replace(LB_ORREU, c(id2), \"RATIO\"),\n                                LB_ORREU = replace(LB_ORREU, c(id3), \"RATIO\"),\n                                ptno = as.numeric(CLIENTID))  %>%\n                        arrange(ptno) # %>%\n  # filter(trimws(toupper(LB_CAT)) %in% c(\"COAG\", \"CHEM\", \"HEME\", \"UA\"))\n\n\n  included1 <- included %>% mutate(ptno = as.numeric(CLIENTID)) %>% select(ptno, SEQ) %>% arrange(ptno)\n  temp1 <- inner_join(laborig, included1, by= \"ptno\")\n\n  temp1$treat <- \"\"\n  id4 <- !(trimws(toupper(temp1$PERIOD)) %in% c(\"SCR\", \"SCREEN\", \"POST\"))\n  temp1$treat[id4] <- substr(trimws(temp1$SEQ[id4]), as.numeric(temp1$PERIOD[id4]),as.numeric(temp1$PERIOD[id4]))\n\n\n\n  med <- ex %>% mutate(ptno = as.numeric(CLIENTID), drugtype = EX_TRT) %>%\n          filter( !is.na(EX_STDAT) ) %>%\n          select(ptno, EX_STDAT, EX_STTIM, EX_TRT, PERIOD, drugtype) %>%\n          arrange(PERIOD, ptno) %>% # sort by ptno and then PERIOD\n          group_by(PERIOD, ptno) %>%  # group by\n          filter(row_number(ptno)==1) # select first.ptno\n   \n\n  temp1 <- left_join(temp1 %>% arrange(ptno, PERIOD), \n                     med %>% arrange(ptno, PERIOD),\n                     by = c(\"ptno\",\"PERIOD\")) %>%\n          arrange(ptno, PERIOD, DAY, HOUR)\n\n  #  Take care of the recheck values\n  temp1 <- temp1 %>% filter( !(HOUR > 0 & trimws(LB_UNSCH) != \"\")) %>%  # remove the after-dose recheck values\n            filter( !( (HOUR <= 0 | is.na(HOUR) )  &           # remove pre-dose recheck having empty values\n                    (trimws(LB_UNSCH) != \"\") & (trimws(LB_ORRES) == \"\")) )\n\n\n  # check possible issues with baseline ----------------------------------------------\n  id_base <- !(toupper(trimws(temp1$PERIOD)) %in% c(\"SCREEN\", \"SCREENING\")) &                              # not in the screening\n    (temp1$HOUR < 0 | is.na(temp1$HOUR)) &                                                      # predose hours\n    ( temp1$LB_DAT > temp1$EX_STDAT | (temp1$LB_DAT == temp1$EX_STDAT & temp1$LB_TIM > temp1$EX_STTIM) )  # LB test is done after dose\n\n  baseprob <- temp1[id_base, ]\n  # if this data set is not empty, then there might be problem\n  if(nrow(baseprob) > 0 & !all(is.na(baseprob)) ) message(\"Warning: Check your BASEPROB data\")\n  temp1 <- temp1[!id_base, ]            # the \"good\" data\n\n  # By default, the missing values of LB_NRIND are reset to be \"Normal\"\n  temp1 <- temp1 %>% mutate(LB_NRIND = replace(LB_NRIND, trimws(LB_NRIND) == \"\", \"N\"),\n                            LB_NRIND = replace(LB_NRIND, trimws(LB_NRIND) != \"N\" & trimws(LB_CAT) == \"UA\", \"H\")) # UA has NORMAL and HIGH\n\n  return(temp1)\n\n}\n\n\n\n\n# Step 2: Get the baselines  ----------------------------------------------\n\ncreate_lab_baseline <- function(laborig){\n\n  baselines <- create_baseline(laborig) %>%        # create a column indicating whether this obs is baseline or not\n             filter(status == \"BASELINE\") %>%\n             mutate(bl = trimws(LB_NRIND), baseperiod = PERIOD, baseday = DAY, basehour = HOUR) %>%\n             select(LB_CAT, LB_TESTC, ptno, baseperiod, baseday, basehour, bl) %>%\n             arrange(LB_CAT, LB_TESTC, ptno, baseperiod, baseday, basehour)\n\n\n  return(baselines)\n}\n\n\n# Step 3: Get the postdoes  ----------------------------------------------\n\n# #' Construct postdose data\n# #' @title create a postdose from lb_cq.\n# #' @param laborig  the dataset returned by \\code{create_lb_cq()}.\n# #' @return the baseline data set.\n\n\ncreate_lab_postdose <- function(laborig){\n  ## post dose\n  temp1 <- create_baseline(laborig) %>%        # create a column indicating whether this obs is baseline or not\n    filter(status == \"POSTDOSE\")\n  \n  postdose <- temp1 %>% filter(HOUR > 0 & trimws(LB_ORRES)!= \"\")\n\n  return(postdose)\n}\n\n\n\n# Step 4: create the lab shift table  ----------------------------------------------\n\n#' Create the lab shift table.\n#'\n#' @title create the lab shift table.\n#' @param lb_cq  the dataset lb_cq read from sas\n#' @param ex  the dataset ex read from sas\n#' @param included  the dataset included from sas (need variable SEQ)\n#' @param UA  whether to produce shift table for UA (should be done separately)\n#' @return the shift table\n#' @export\n#' @examples \n#' included <- new_create_included(ex, dm, cr, ds)\n#' others <- labshift(lb_cq, included, ex,  UA=FALSE)  #not urinalysis\n#' UA <- labshift(lb_cq, included, ex, UA=TRUE)       # UA\n#'\n\n\nlabshift <- function(lb_cq, included, ex, UA= FALSE){\n  \n  # clean the lab data\n  laborig <- create_lb_cq(lb_cq, included, ex)\n  \n  \n  # get baseline\n  baselines <- create_lab_baseline(laborig)\n  # get postdose\n  postdose <- create_lab_postdose(laborig)\n  \n  labfinal2 <- inner_join(postdose %>% arrange(LB_CAT, LB_TESTC, ptno),\n                          baselines %>% arrange(LB_CAT, LB_TESTC, ptno),\n                          by = c(\"LB_CAT\", \"LB_TESTC\", \"ptno\")) %>%\n                    mutate(change = paste(trimws(bl), trimws(LB_NRIND), sep = \"\"))\n  \n  if(!UA){        # if it's not UA test\n        labfinal0 <- labfinal2 %>% filter(trimws(LB_CAT) != \"UA\") \n        labfinal1 <- labfinal0 %>% select(LB_CAT, LB_TESTC,  SEQ, DAY, change)\n        result <- as.data.frame(ftable(labfinal1))                # multi-layer tables\n        result1 <- dcast(result, LB_CAT + LB_TESTC + SEQ + DAY ~ change, value.var = \"Freq\")\n        \n        header <- c(\"LL\", \"LN\", \"LH\", \"NL\", \"NN\", \"NH\", \"HL\", \"HN\",\"HH\")\n        t1 <- !(header %in%  names(result1))    # which columns did not show up \n        \n        zeros <- data.frame(matrix(0, nrow = nrow(result1), ncol =sum(t1)))  # make those columns to be 0\n        names(zeros) <- header[t1]\n        result2 <- bind_cols(result1, zeros) %>% \n          mutate_if(is.factor, as.character)   \n        # if the variable is factor, turn it to character, so result3 won't issue warning message\n        \n        result2 <- result2 %>% select(LB_CAT, LB_TESTC, SEQ, DAY, \n                                      LL, LN, LH, NL, NN, NH, HL, HN, HH) %>%\n                          filter( LL+ LN+ LH+ NL+ NN+ NH+ HL+ HN+ HH  != 0)\n        \n        # remove rows that have all zeros\n        \n        \n  }\n  \n  else {                       # if it's UA test\n        labfinal0 <- labfinal2 %>% filter(trimws(LB_CAT) == \"UA\")\n        labfinal1 <- labfinal0 %>% select(LB_CAT, LB_TESTC,  SEQ, DAY, change)\n        result <- as.data.frame(ftable(labfinal1))\n        \n        result1 <- dcast(result, LB_CAT + LB_TESTC + SEQ + DAY ~ change, value.var = \"Freq\")\n        \n        header <- c(\"NN\", \"NH\", \"HN\", \"HH\")\n        t1 <- !(header %in%  names(result1))    # which columns did not show up \n        \n        zeros <- data.frame(matrix(0, nrow = nrow(result1), ncol =sum(t1)))  # make those columns to be 0\n        names(zeros) <- header[t1]\n        result2 <- bind_cols(result1, zeros) %>% \n          mutate_if(is.factor, as.character)\n        \n        result2 <- result2 %>% select(LB_CAT, LB_TESTC, SEQ, DAY, \n                                     NN, NH, HN, HH) %>%\n                              filter(NN + NH + HN + HH  != 0)\n    }\n  \n  full_name <- laborig %>% select(LB_CAT, LB_CAT_D, LB_TEST, LB_TESTC) \n  \n  result3 <- right_join(full_name %>% arrange(LB_CAT, LB_TESTC) %>% distinct(), \n                        result2 %>% arrange(LB_CAT, LB_TESTC), \n                        by = c(\"LB_CAT\", \"LB_TESTC\"))\n  \n  return(result3)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1476395873208.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "399311946",
    "id" : "4A999BF",
    "lastKnownWriteTime" : 1476396161,
    "last_content_update" : 1476396161663,
    "path" : "~/cdashQC/cdashQC-master/R/cdash_lab_shift.R",
    "project_path" : "cdashQC-master/R/cdash_lab_shift.R",
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}